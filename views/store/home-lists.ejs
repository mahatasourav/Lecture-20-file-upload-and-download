<!DOCTYPE html>
<html lang="en">
  <head>
    <%- include("../partials/head") %>
    <style>
      /* Only keeping necessary custom animations that aren't available in Tailwind */
      @keyframes fadeIn {
        from {
          opacity: 0;
          transform: translateY(20px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      .animate-fade-in {
        animation: fadeIn 0.5s ease-out forwards;
      }

      .home-card {
        opacity: 0;
      }
    </style>
  </head>
  <body class="bg-gray-50">
    <%- include("../partials/nav") %>
    <main class="container mx-auto px-4 py-8">
      <h3 class="text-center text-3xl font-bold mb-8 text-gray-800">
        Your Registered Properties
        <div class="w-20 h-1 bg-blue-500 mx-auto mt-2"></div>
      </h3>
      <!-- Filter and Sort Options -->
      <div
        class="bg-white p-4 rounded-lg shadow-sm mb-8 flex gap-4 items-center flex-wrap"
      >
        <div class="flex-1 relative min-w-[200px]">
          <div
            class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none"
          >
            <svg
              class="h-5 w-5 text-gray-400"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
              />
            </svg>
          </div>
          <input
            type="text"
            id="searchInput"
            placeholder="Search properties..."
            class="w-full pl-10 pr-4 py-2 border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500"
          />
        </div>
        <div class="flex-1 relative min-w-[200px]">
          <div
            class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none"
          >
            <svg
              class="h-5 w-5 text-gray-400"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"
              />
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"
              />
            </svg>
          </div>
          <input
            type="text"
            id="locationFilter"
            list="locationsList"
            placeholder="Search by location..."
            class="w-full pl-10 pr-4 py-2 border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500"
            autocomplete="off"
          />
          <datalist id="locationsList">
            <% const locations = [...new Set(homeRegistred.map(home =>
            home.location))]; locations.forEach(location => { %>
            <option value="<%= location %>"></option>
            <% }); %>
          </datalist>
        </div>
        <div class="relative min-w-[150px]">
          <div
            class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none"
          >
            <svg
              class="h-5 w-5 text-gray-400"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M3 4h13M3 8h9m-9 4h6m4 0l4-4m0 0l4 4m-4-4v12"
              />
            </svg>
          </div>
          <select
            id="sortSelect"
            class="w-full pl-10 pr-4 py-2 border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500 appearance-none bg-white"
          >
            <option value="">Sort by</option>
            <option value="price_asc">üí∞ Price: Low to High</option>
            <option value="price_desc">üí∞ Price: High to Low</option>
            <option value="rating">‚≠ê Rating</option>
          </select>
          <div
            class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none"
          >
            <svg
              class="h-4 w-4 text-gray-400"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M19 9l-7 7-7-7"
              />
            </svg>
          </div>
        </div>
        <button
          id="clearFilters"
          class="px-4 py-2 bg-gray-100 text-gray-600 rounded-lg hover:bg-gray-200 transition-colors duration-200 flex items-center gap-2"
        >
          <svg
            class="h-5 w-5"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M6 18L18 6M6 6l12 12"
            />
          </svg>
          Clear Filters
        </button>
      </div>
      <!-- Results Count with Icon -->
      <div
        id="resultsCount"
        class="flex items-center gap-2 text-sm text-gray-600 mb-4"
      >
        <svg
          class="h-5 w-5 text-blue-500"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"
          />
        </svg>
        <span>Showing all properties</span>
      </div>
      <div
        class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 max-w-7xl mx-auto"
      >
        <% homeRegistred.forEach(home => { %>
        <div
          class="home-card bg-white rounded-xl shadow-sm overflow-hidden border border-gray-100 hover:-translate-y-1 transition-transform duration-300 ease-in-out"
        >
          <div class="relative">
            <img
              src="<%= home.image ? home.image : '/images/default-home.jpg' %>"
              alt="<%= home.homename %>"
              class="w-full h-48 object-cover transition-transform duration-300 hover:scale-105"
              onerror="this.src='/images/default-home.jpg';"
            />
            <div class="absolute top-4 right-4">
              <span
                class="bg-yellow-50 border border-yellow-200 text-yellow-700 px-3 py-1 rounded-full text-sm font-medium"
              >
                <%= home.rating %> ‚≠ê
              </span>
            </div>
          </div>

          <div class="p-6">
            <h3 class="text-xl font-bold text-gray-800 mb-2 truncate">
              <%= home.homename %>
            </h3>
            <p class="text-gray-600 mb-4 flex items-center">
              <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                <path
                  d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z"
                />
              </svg>
              <%= home.location %>
            </p>
            <div class="flex justify-between items-center mb-4">
              <span
                class="bg-blue-50 border border-blue-200 text-blue-700 px-3 py-1 rounded-full text-sm font-medium"
              >
                ‚Çπ<%= home.price %>
                <span class="text-gray-500 text-xs">/ night</span>
              </span>
            </div>

            <div
              class="flex justify-between items-center pt-4 border-t border-gray-100"
            >
              <a
                href="/store/home-details/<%= home._id %>"
                class="px-6 py-2 bg-blue-500 text-white font-medium rounded-lg hover:bg-blue-600 transition-colors duration-200 inline-flex items-center"
              >
                View Details
              </a>
              <%- include("../partials/favourite", {home : home}) %>
            </div>
          </div>
        </div>
        <% }) %>
      </div>
    </main>
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        const searchInput = document.getElementById("searchInput");
        const locationFilter = document.getElementById("locationFilter");
        const sortSelect = document.getElementById("sortSelect");
        const clearFiltersBtn = document.getElementById("clearFilters");
        const resultsCount = document.getElementById("resultsCount");
        const homeCards = document.querySelectorAll(".home-card");

        function filterHomes() {
          const searchTerm = searchInput.value.toLowerCase();
          const location = locationFilter.value.toLowerCase();
          const sortValue = sortSelect.value;

          let filteredHomes = Array.from(homeCards);
          let visibleCount = 0;

          filteredHomes.forEach((card) => {
            const title = card.querySelector("h3").textContent.toLowerCase();
            const cardLocation = card
              .querySelector("p")
              .textContent.toLowerCase();
            const shouldShow =
              title.includes(searchTerm) &&
              (location === "" || cardLocation.includes(location));

            card.style.display = shouldShow ? "block" : "none";
            if (shouldShow) visibleCount++;
          });

          if (sortValue) {
            const container = document.querySelector(".grid");
            const sortedCards = Array.from(filteredHomes)
              .filter((card) => card.style.display !== "none")
              .sort((a, b) => {
                if (sortValue === "price_asc" || sortValue === "price_desc") {
                  const priceA = parseFloat(
                    a.querySelector(".bg-blue-50").textContent.replace("‚Çπ", "")
                  );
                  const priceB = parseFloat(
                    b.querySelector(".bg-blue-50").textContent.replace("‚Çπ", "")
                  );
                  return sortValue === "price_asc"
                    ? priceA - priceB
                    : priceB - priceA;
                } else if (sortValue === "rating") {
                  const ratingA = parseFloat(
                    a.querySelector(".bg-yellow-50").textContent
                  );
                  const ratingB = parseFloat(
                    b.querySelector(".bg-yellow-50").textContent
                  );
                  return ratingB - ratingA;
                }
              });

            sortedCards.forEach((card) => container.appendChild(card));
          }

          resultsCount.querySelector(
            "span"
          ).textContent = `Showing ${visibleCount} ${
            visibleCount === 1 ? "property" : "properties"
          }`;
        }

        searchInput.addEventListener("input", filterHomes);
        locationFilter.addEventListener("input", filterHomes);
        sortSelect.addEventListener("change", filterHomes);

        clearFiltersBtn.addEventListener("click", () => {
          searchInput.value = "";
          locationFilter.value = "";
          sortSelect.value = "";
          filterHomes();
        });

        // Add animation class to cards with delay
        homeCards.forEach((card, index) => {
          setTimeout(() => {
            card.style.opacity = "1";
            card.classList.add("animate-fade-in");
          }, index * 100);
        });
      });
    </script>
  </body>
</html>
